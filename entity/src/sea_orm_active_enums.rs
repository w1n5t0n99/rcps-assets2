//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.6

use oso::{ToPolar, PolarValue};
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, Serialize, Deserialize)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "role")]
pub enum Role {
    #[sea_orm(string_value = "admin")]
    Admin,
    #[sea_orm(string_value = "manager")]
    Manager,
    #[sea_orm(string_value = "member")]
    Member,
}

impl From<Role> for String {
    fn from(role: Role) -> Self {
        match role {
            Role::Admin => "admin".to_string(),
            Role::Manager => "manager".to_string(),
            Role::Member => "member".to_string(),
        }
    }
}

impl ToPolar for Role {
    fn to_polar(self) -> PolarValue {
        match self {
            Role::Admin => PolarValue::String("admin".to_string()),
            Role::Manager => PolarValue::String("manager".to_string()),
            Role::Member => PolarValue::String("member".to_string()),
        }
    }
}